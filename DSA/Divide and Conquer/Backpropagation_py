import numpy as np

# Define the sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Define the neural network class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights randomly
        self.weights_input_hidden = np.random.rand(input_size, hidden_size)
        self.weights_hidden_output = np.random.rand(hidden_size, output_size)

    def forward(self, inputs):
        # Forward pass
        self.hidden_input = np.dot(inputs, self.weights_input_hidden)
        self.hidden_output = sigmoid(self.hidden_input)
        self.output = np.dot(self.hidden_output, self.weights_hidden_output)
        return self.output

    def backward(self, inputs, targets, learning_rate):
        # Backward pass
        # Compute error
        output_error = targets - self.output

        # Compute gradients for output layer
        output_delta = output_error * sigmoid_derivative(self.output)
        hidden_output_transposed = self.hidden_output.T
        weights_hidden_output_adjustment = np.dot(hidden_output_transposed, output_delta)

        # Update weights for output layer
        self.weights_hidden_output += learning_rate * weights_hidden_output_adjustment

        # Compute gradients for hidden layer
        hidden_error = np.dot(output_delta, self.weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden_output)
        inputs_transposed = inputs.T
        weights_input_hidden_adjustment = np.dot(inputs_transposed, hidden_delta)

        # Update weights for hidden layer
        self.weights_input_hidden += learning_rate * weights_input_hidden_adjustment

# Example usage
# Define input, output, and hidden layer sizes
input_size = 2
hidden_size = 3
output_size = 1

# Create a neural network
nn = NeuralNetwork(input_size, hidden_size, output_size)

# Define training data
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
targets = np.array([[0], [1], [1], [0]])

# Train the neural network
epochs = 10000
learning_rate = 0.1
for epoch in range(epochs):
    # Forward pass
    output = nn.forward(inputs)
    
    # Backward pass
    nn.backward(inputs, targets, learning_rate)

    # Print error every 1000 epochs
    if epoch % 1000 == 0:
        error = np.mean(np.square(targets - output))
        print(f"Epoch {epoch}: Error = {error}")

# Test the trained neural network
print("\nTesting the trained neural network:")
for i in range(len(inputs)):
    print(f"Input: {inputs[i]}, Target: {targets[i]}, Predicted: {nn.forward(inputs[i])}")
